# migrations/versions/1a2b3c4d5e6f_set_super_admin.py
"""Set initial super admin account manually

Revision ID: 1a2b3c4d5e6f
Revises: d33eb46fd0ca
Create Date: 2025-04-24 10:00:00 # Adaptez la date/heure si nécessaire

"""
from alembic import op
import sqlalchemy as sa

# Import pour l'update direct
from sqlalchemy.sql import table, column
from sqlalchemy import Boolean, String, text


# revision identifiers, used by Alembic.
revision = '1a2b3c4d5e6f' # <<< ID de ce fichier
down_revision = 'd33eb46fd0ca' # <<< ID de la migration précédente (celle qui ajoutait is_super_admin)
branch_labels = None
depends_on = None


def upgrade():
    # ### Commande pour définir le super admin ###
    print("--- Début migration 1a2b3c4d5e6f (Set Super Admin) ---")
    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)

    # Email du super admin à définir
    super_admin_email = 'pp364598@gmail.com'
    print(f"Tentative de mise à jour du Super Admin pour : {super_admin_email}")

    try:
        # Construit l'instruction UPDATE
        user_table = table('user',
            column('email', String),
            column('is_admin', Boolean),
            column('is_super_admin', Boolean)
        )
        stmt = user_table.update().\
            where(user_table.c.email == super_admin_email).\
            values(is_admin=True, is_super_admin=True)

        # Exécute l'instruction
        result = session.execute(stmt)
        session.commit() # Commit la transaction

        if result.rowcount > 0:
            print(f"SUCCÈS : Utilisateur {super_admin_email} mis à jour comme Super Admin ({result.rowcount} ligne affectée).")
        else:
            # Si l'utilisateur n'existe pas ENCORE, ce n'est pas grave pour cette migration
            print(f"INFO : Aucun utilisateur trouvé avec l'email {super_admin_email} lors de cette migration. Assurez-vous qu'il est inscrit.")

    except Exception as e:
        session.rollback() # Annule en cas d'erreur
        print(f"ERREUR lors de la mise à jour du super admin dans la migration : {e}")
    finally:
        session.close() # Ferme la session

    print("--- Fin migration 1a2b3c4d5e6f ---")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # On ne retire pas les droits en cas de downgrade pour la sécurité
    print("Downgrade de '1a2b3c4d5e6f' : Aucune action effectuée pour ne pas retirer les droits par erreur.")
    pass
    # ### end Alembic commands ###