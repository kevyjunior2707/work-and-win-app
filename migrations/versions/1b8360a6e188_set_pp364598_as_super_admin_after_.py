    # migrations/versions/abcdef123456_set_pp364598_as_super_admin_after_registration.py
    """Set pp364598 as super admin after registration

    Revision ID: abcdef123456  # <<< REMPLACEZ PAR L'ID DE CE FICHIER
    Revises: 9888efdcb79b     # <<< ID de la migration précédente (add parent_id to Comment)
    Create Date: # Date de création
    """
    from alembic import op
    import sqlalchemy as sa
    # Import pour l'update direct
    from sqlalchemy.sql import table, column
    from sqlalchemy import Boolean, String

    # revision identifiers, used by Alembic.
    revision = 'abcdef123456'  # <<< REMPLACEZ PAR L'ID DE CE FICHIER
    down_revision = '9888efdcb79b' # <<< ID de la migration "Add parent_id to Comment for replies"
    branch_labels = None
    depends_on = None


    def upgrade():
        # ### commands auto generated by Alembic - please adjust! ###
        # Crée une "table" temporaire pour l'opération de mise à jour
        # Cela évite d'importer le modèle User directement, ce qui peut causer des problèmes dans les migrations.
        user_table = table('user',
            column('email', String),
            column('is_admin', Boolean),
            column('is_super_admin', Boolean)
        )

        # Met à jour l'utilisateur spécifique par email
        # Assurez-vous que l'email ici est EXACTEMENT celui que vous avez enregistré sur Render.
        op.execute(
            user_table.update().
            where(user_table.c.email == op.inline_literal('pp364598@gmail.com')).
            values(is_admin=op.inline_literal(True), is_super_admin=op.inline_literal(True))
        )
        print("INFO: Attempted to set pp364598@gmail.com as super admin.")
        # ### end Alembic commands ###


    def downgrade():
        # ### commands auto generated by Alembic - please adjust! ###
        # Optionnel: On pourrait retirer les droits ici, mais pour une migration "one-shot",
        # il est souvent plus simple de ne rien faire ou de juste commenter.
        # Si vous voulez pouvoir annuler :
        # user_table = table('user',
        #     column('email', String),
        #     column('is_admin', Boolean),
        #     column('is_super_admin', Boolean)
        # )
        # op.execute(
        #     user_table.update().
        #     where(user_table.c.email == op.inline_literal('pp364598@gmail.com')).
        #     values(is_admin=op.inline_literal(False), is_super_admin=op.inline_literal(False)) # Ou les valeurs d'origine
        # )
        # print("INFO: Attempted to remove super admin rights from pp364598@gmail.com during downgrade.")
        pass # Pour l'instant, ne fait rien en downgrade
        # ### end Alembic commands ###
    