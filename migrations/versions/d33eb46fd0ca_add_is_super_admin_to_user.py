# migrations/versions/d33eb46fd0ca_add_is_super_admin_to_user.py
"""Add is_super_admin to User

Revision ID: d33eb46fd0ca
Revises: ed9f27dccec0
Create Date: 2025-04-24 08:40:00 # Adaptez la date si nécessaire

"""
from alembic import op
import sqlalchemy as sa

# <<< AJOUT POUR MODIFIER DIRECTEMENT >>>
from sqlalchemy.sql import table, column
from sqlalchemy import Boolean, String
# <<< FIN AJOUT >>>


# revision identifiers, used by Alembic.
revision = 'd33eb46fd0ca'
down_revision = 'ed9f27dccec0'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        # Ajoute la colonne avec une valeur par défaut pour les lignes existantes
        batch_op.add_column(sa.Column('is_super_admin', sa.Boolean(), nullable=False, server_default='0'))

    # <<< CODE AJOUTÉ POUR DÉFINIR LE SUPER ADMIN >>>
    # Définit une structure de table minimale pour la mise à jour
    user_table = table('user',
        column('email', String),
        column('is_admin', Boolean),
        column('is_super_admin', Boolean)
    )
    # Met à jour l'utilisateur spécifique par email
    op.execute(
        user_table.update().where(user_table.c.email == op.inline_literal('pp364598@gmail.com'))
        .values(is_admin=op.inline_literal(True), is_super_admin=op.inline_literal(True))
    )
    # <<< FIN CODE AJOUTÉ >>>
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_column('is_super_admin')
    # ### end Alembic commands ###