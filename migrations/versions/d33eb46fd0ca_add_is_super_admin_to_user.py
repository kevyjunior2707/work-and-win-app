# migrations/versions/d33eb46fd0ca_add_is_super_admin_to_user.py
"""Add is_super_admin to User and set initial super admin

Revision ID: d33eb46fd0ca
Revises: ed9f27dccec0
Create Date: 2025-04-24 08:40:00 # Adaptez la date si nécessaire

"""
from alembic import op
import sqlalchemy as sa

# Import pour l'update direct
from sqlalchemy.sql import table, column
from sqlalchemy import Boolean, String, text


# revision identifiers, used by Alembic.
revision = 'd33eb46fd0ca'
down_revision = 'ed9f27dccec0'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    print("--- Début migration d33eb46fd0ca ---") # Log de début
    with op.batch_alter_table('user', schema=None) as batch_op:
        print("Ajout de la colonne is_super_admin...")
        batch_op.add_column(sa.Column('is_super_admin', sa.Boolean(), nullable=False, server_default='0'))
        print("Colonne is_super_admin ajoutée.")

    # <<< CODE MODIFIÉ POUR DÉFINIR LE SUPER ADMIN >>>
    # Utilise une connexion directe pour exécuter l'UPDATE
    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)

    # Email du super admin à définir
    super_admin_email = 'pp364598@gmail.com'
    print(f"Tentative de mise à jour du Super Admin pour : {super_admin_email}")

    try:
        # Construit l'instruction UPDATE
        user_table = table('user',
            column('email', String),
            column('is_admin', Boolean),
            column('is_super_admin', Boolean)
        )
        stmt = user_table.update().\
            where(user_table.c.email == super_admin_email).\
            values(is_admin=True, is_super_admin=True)

        # Exécute l'instruction
        result = session.execute(stmt)
        session.commit() # Important de commit la transaction

        # Vérifie si une ligne a été affectée
        if result.rowcount > 0:
            print(f"SUCCÈS : Utilisateur {super_admin_email} mis à jour comme Super Admin ({result.rowcount} ligne affectée).")
        else:
            print(f"AVERTISSEMENT : Aucun utilisateur trouvé avec l'email {super_admin_email} lors de l'UPDATE. Inscrivez-vous d'abord sur le site.")

    except Exception as e:
        session.rollback() # Annule en cas d'erreur
        print(f"ERREUR lors de la mise à jour du super admin : {e}")
        # Optionnel: Renvoyer l'erreur pour faire échouer le build si nécessaire
        # raise e
    finally:
        session.close() # Ferme la session
    # <<< FIN CODE MODIFIÉ >>>

    print("--- Fin migration d33eb46fd0ca ---")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_column('is_super_admin')
    # ### end Alembic commands ###